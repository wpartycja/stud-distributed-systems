int init() {
    // Crea o abre la cola de mensajes del servidor
    server_queue = mq_open("/server_queue", O_CREAT | O_RDWR, S_IRWXU | S_IRWXG, NULL);
    if (server_queue == -1) {
        perror("mq_open");
        return -1;
    }

    // Envía un mensaje al servidor para inicializar el servicio
    Message message = {1, {0}};
    if (mq_send(server_queue, (char *)&message, sizeof(message), 0) == -1) {
        perror("mq_send");
        return -1;
    }

    // Recibe la respuesta del servidor
    if (mq_receive(client_queue, (char *)&message, sizeof(message), NULL) == -1) {
        perror("mq_receive");
        return -1;
    }

    return message.tuple.key;
}

int set_value(int key, char *value1, int value2, double value3) {
    // Crea o abre la cola de mensajes del servidor
    server_queue = mq_open("/server_queue", O_CREAT | O_RDWR, S_IRWXU | S_IRWXG, NULL);
    if (server_queue == -1) {
        perror("mq_open");
        return -1;
    }

    // Envía un mensaje al servidor para insertar el elemento
    Tuple tuple = {key, "", value2, value3};
    strncpy(tuple.value1, value1, MAX_STRING_LEN);
    Message message = {2, tuple};
    if (mq_send(server_queue, (char *)&message, sizeof(message), 0) == -1) {
        perror("mq_send");
        return -1;
    }

    // Recibe la respuesta del servidor
    if (mq_receive(client_queue, (char *)&message, sizeof(message), NULL) == -1) {
        perror("mq_receive");
        return -1;
    }

    return message.tuple.key;
}

int get_value(int key, char *value1, int *value2, double *value3) {
    // Crea o abre la cola de mensajes del servidor
    server_queue = mq_open("/server_queue", O_CREAT | O_RDWR, S_IRWXU | S_IRWXG, NULL);
    if (server_queue == -1) {
        perror("mq_open");
        return -1;
    }

    // Envía un mensaje al servidor para obtener los valores asociados a la clave
